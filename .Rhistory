txt <- fread("lib/100001.txt",quote = T)
txt <- fread("lib/100001.txt",quote = F)
View(txt)
txt <- fread("lib/100001.txt",quote = F,header = F,stringsAsFactors = T)
View(txt)
install.packages("xml2")
library(xml2)
txt <- read_xml("lib/100001.txt")
View(txt)
xml_doc  <- read_xml("lib/100001.txt")
# 提取信息
ccid <- xml_text(xml_find_first(xml_doc, "//ccid"))
common_name <- xml_text(xml_find_first(xml_doc, "//names/common"))
iupac_name <- xml_text(xml_find_first(xml_doc, "//names/iupac"))
molecular_formula <- xml_text(xml_find_first(xml_doc, "//molecularFormula"))
molecular_weight <- xml_text(xml_find_first(xml_doc, "//molecularWeightU"))
cas_number <- xml_text(xml_find_first(xml_doc, "//casRegistry/primary"))
# 打印提取的信息
cat("CCID:", ccid, "\n")
cat("Common Name:", common_name, "\n")
cat("IUPAC Name:", iupac_name, "\n")
cat("Molecular Formula:", molecular_formula, "\n")
cat("Molecular Weight:", molecular_weight, "\n")
cat("CAS Number:", cas_number, "\n")
xml_doc  <- read_xml("lib/100001.txt")
xml_doc  <- read_xml("lib/100001.txt")
View(xml_doc)
xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
hmdb_id <- xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
hmdb_id
hmdb_id <- paste0("HMDB00",gsub("HMDB","",hmdb_id))
hmdb_id
xml_doc  <- read_xml("lib/100002.txt")
hmdb_id <- xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
hmdb_id <- paste0("HMDB00",gsub("HMDB","",hmdb_id))
xm <- dir("HMDB_Reference_Cards")
xm
xm <- dir("HMDB_Reference_Cards",full.names = T)
xm
xm <- dir("HMDB_Reference_Cards",full.names = T)
for(x in xm){
new_name <- paste0("lib/",gsub(".xmc",".txt",f))
file.rename(x, new_name)
}
xm <- dir("HMDB_Reference_Cards",full.names = T)
for(x in xm){
new_name <- paste0("lib/",gsub(".xmc",".txt",x))
file.rename(x, new_name)
}
xm <- dir("HMDB_Reference_Cards",full.names = T)
xm
for(x in xm){
new_name <- gsub(".xmc",".txt",x)
file.rename(x, new_name)
}
for(x in xm){
new_name <- gsub(".xmc",".txt",x)
file.rename(x, new_name)
file.copy("HMDB_Reference_Cards/.","lib/.",overwrite = T,recursive = T)
}
xml_doc  <- read_xml("lib/1000181.txt")
hmdb_id <- xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
hmdb_id <- paste0("HMDB00",gsub("HMDB","",hmdb_id))
hmdb_id
xml_doc  <- read_xml("lib/1000181.txt")
xml_doc  <- read_xml("lib/100181.txt")
hmdb_id <- xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
hmdb_id <- paste0("HMDB00",gsub("HMDB","",hmdb_id))
View(xml_doc)
xm <- dir("HMDB_Reference_Cards",full.names = T)
common_name <- xml_text(xml_find_first(xml_doc, "//names/common"))
xml_doc  <- read_xml("lib/100181.txt")
common_name <- xml_text(xml_find_first(xml_doc, "//names/common"))
common_name
View(xml_doc)
xml_child(xml_child(xml_doc, 2), 1)
install.packages("xml")
install.packages("XML")
common_name <- xml_text(xml_find_first(xml_doc, "//names/common"))
common_name
xml_text(xml_find_first(xml_data, ".//common"))
common_name <- xml_text(xml_find_first(xml_doc, ".//common"))
xml_find_first(xml_doc, ".//common")
xml_find_first(xml_doc, "//names/common")
xml_doc  <- read_xml("lib/100001.xml")
xml_doc  <- read_xml("lib/100001.xml")
View(xml_doc)
xml_attrs(xml_child(xml_child(xml_doc, 2), 1))
xml_attrs(xml_doc)
xml_child(xml_doc, 9)
xml_attrs(xml_child(xml_child(xml_doc, 9), 3))
xml_attrs(xml_child(xml_child(xml_doc, 9), 3))[["id"]]
xml_child(xml_child(xml_doc, 2), 1)
install.packages("XML")
install.packages("XML")
library(XML)
xm <- read_html("lib/100001.xml")
library(xml2)
library(XML)
xm <- read_html("lib/100001.xml")
View(xm)
xml_child(xml_child(xml_child(xml_child(xm, 1), 1), 2), 1)
XML <- readHTMLTable("lib/100001.xml")
View(XML)
library(XML)
XML <- readHTMLList("lib/100001.xml")
XML <- readHTMLList("lib/100001.xml")
View(XML)
# 假设你的XML文件路径为 "file.xml"
xml_file_path <- "lib/100001.xml"
# 读取XML文件
xml_data <- read_xml(xml_file_path)
# 加载xml2包
library(xml2)
# 假设你的XML文件路径为 "file.xml"
xml_file_path <- "lib/100001.xml"
# 读取XML文件
xml_data <- read_xml(xml_file_path)
View(xml_data)
xml_child(xml_child(xml_data, 2), 1)
# 提取metaCompound节点（考虑命名空间）
# 如果你的XML文件没有使用命名空间，可以省略ns参数
ns <- xml_ns_def(xml_data) # 获取命名空间定义
meta_compound <- xml_find_first(xml_data, "//d:metaCompound", ns = setNames(c("chenomx:oddjob:metacompound:2"), c("d")))
View(meta_compound)
xml_attrs(xml_child(xml_child(meta_compound, 2), 1))
# 提取metaCompound节点（假设命名空间不复杂，直接使用局部名称）
meta_compound <- xml_find_first(xml_data, "//metaCompound")
# 加载xml2包
library(xml2)
# 假设你的XML文件路径为 "file.xml"
xml_file_path <- "lib/100001.xml"
# 读取XML文件
xml_data <- read_xml(xml_file_path)
# 提取metaCompound节点（假设命名空间不复杂，直接使用局部名称）
meta_compound <- xml_find_first(xml_data, "//metaCompound")
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//names/common"))
View(meta_compound)
meta_compound
meta_compound
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
meta_compound
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取ccid
ccid <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='ccid']"))
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
common_name
# 加载xml2包
library(xml2)
# 读取XML文件
xml_data <- read_xml("lib/100001.xml")
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取ccid
ccid <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='ccid']"))
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 加载xml2包
library(xml2)
# 读取XML文件
xml_data <- read_xml("lib/100001.xml")
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取ccid
ccid <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='ccid']"))
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
View(xml_data)
xml_data
# 提取hmdb id
hmdb_id <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='externalReferences']/*[local-name()='externalDbRef']"))
xml_data[9]
xml_data
xx <- print(xml_data)
xx <- as.character(xml_data)
xx
library(stringr)
str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb.id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb.id)
install.packages("xml2")
library(xml2)
xm <- dir("HMDB_Reference_Cards",full.names = T)
xm
rm(list=ls())
# 加载R包
library(xml2)
library(stringr)
library(dplyr)
rm(list=ls())
xmc <- dir("HMDB_Reference_Cards",full.names = T)
xmc <- dir("HMDB_Reference_Cards",full.names = T)
file.copy("HMDB_Reference_Cards/.","lib/.",overwrite = T,recursive = T)
xmc <- dir("lib",full.names = T)
for(x in xmc){
new_name <- gsub(".xmc",".xml",x)
file.rename(x, new_name)
}
# 读取XML文件
xml_data <- read_xml("lib/100001.xml")
View(xml_data)
# 提取hmdb id
xx <- as.character(xml_data)
xx
hmdb.id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb.id)
hmdb_id
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
common_name
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
common_name
xml_file <- dir("lib",full.names = T)
xml_file
length(xml_file)
y=1
paste0("Number ",y," of ",length(xml_file)," is processed...")
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 提取hmdb id
xx <- as.character(xml_data)
hmdb.id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb.id)
for(y in 1:length(xml_file)) {
paste0("Number ",y," of ",length(xml_file)," is processed...")
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取common名称
common_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 提取hmdb id
xx <- as.character(xml_data)
hmdb.id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb.id)
}
hmdb_df <- data.frame()
# 加载R包
library(xml2)
library(stringr)
library(dplyr)
rm(list=ls())
file.copy("HMDB_Reference_Cards/.","lib/.",overwrite = T,recursive = T)
xmc <- dir("lib",full.names = T)
for(x in xmc){
new_name <- gsub(".xmc",".xml",x)
file.rename(x, new_name)
}
xml_file <- dir("lib",full.names = T)
hmdb_df <- data.frame()
y=1
for(y in 1:length(xml_file)) {
paste0("Number ",y," of ",length(xml_file)," is processed...")
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取common名称
compound_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 提取hmdb id
xx <- as.character(xml_data)
hmdb_id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb.id)
df <- data.frame(id=hmdb_id,name=compound_name)
hmdb_df <- rbind(hmdb_df,df)
}
# 加载R包
library(xml2)
library(stringr)
library(dplyr)
rm(list=ls())
file.copy("HMDB_Reference_Cards/.","lib/.",overwrite = T,recursive = T)
xmc <- dir("lib",full.names = T)
for(x in xmc){
new_name <- gsub(".xmc",".xml",x)
file.rename(x, new_name)
}
xml_file <- dir("lib",full.names = T)
hmdb_df <- data.frame()
y=1
for(y in 1:length(xml_file)) {
paste0("Number ",y," of ",length(xml_file)," is processed...")
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取common名称
compound_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 提取hmdb id
xx <- as.character(xml_data)
hmdb_id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb_id)
df <- data.frame(id=hmdb_id,name=compound_name)
hmdb_df <- rbind(hmdb_df,df)
}
# 加载R包
library(xml2)
library(stringr)
library(dplyr)
library(openxlsx)
rm(list=ls())
file.copy("HMDB_Reference_Cards/.","lib/.",overwrite = T,recursive = T)
xmc <- dir("lib",full.names = T)
for(x in xmc){
new_name <- gsub(".xmc",".xml",x)
file.rename(x, new_name)
}
xml_file <- dir("lib",full.names = T)
hmdb_df <- data.frame()
y=1
for(y in 1:length(xml_file)) {
print(paste0("Number ",y," of ",length(xml_file)," is processed..."))
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取metaCompound节点
# 如果命名空间复杂，通常需要手动检查结构或使用其他工具确认路径
meta_compound <- xml_find_first(xml_data, "//*[local-name()='metaCompound']")
# 检查是否找到节点
if (is.na(meta_compound)) {
cat("No metaCompound node found.\n")
} else {
# 提取common名称
compound_name <- xml_text(xml_find_first(meta_compound, ".//*[local-name()='names']/*[local-name()='common']"))
}
# 提取hmdb id
xx <- as.character(xml_data)
hmdb_id <- str_extract(xx,"(?<=id=\"HMDB).*(?=\" type)")
hmdb_id <- paste0("HMDB00",hmdb_id)
df <- data.frame(id=hmdb_id,name=compound_name)
hmdb_df <- rbind(hmdb_df,df)
}
write.xlsx(hmdb_df,"hmdb_400M.xlsx")
hmdb_df <- hmdb_dfdf %>% arrange(name)
hmdb_df <- hmdb_df %>% arrange(name)
View(hmdb_df)
write.xlsx(hmdb_df,"hmdb_400M.xlsx")
xml_file <- dir("lib",full.names = T)
xml_file <- dir("lib",full.names = T) %>% unique()
xml_file
duplicated(xml_file)
table(duplicated(xml_file))
hmdb_df <- distinct(hmdb_df,name,.keep_all = T)
hmdb_df <- distinct(hmdb_df,name,.keep_all = T)
write.xlsx(hmdb_df,"hmdb_400M.xlsx")
table(duplicated(hmdb_df$id))
table(duplicated(hmdb_df$name))
write.xlsx(hmdb_df,"hmdb_400M.xlsx")
y=1
# 读取XML文件
xml_data <- read_xml(xml_file[y])
# 提取hmdb id
xx <- as.character(xml_data)
xx
# 加载R包
library(xml2)
library(stringr)
library(dplyr)
library(openxlsx)
rm(list=ls())
#-----------------
c400 <- readRDS("dataset/nmr/nmr_400M.rds")
c500 <- readRDS("dataset/nmr/nmr_500M.rds")
h400 <- read.xlsx("dataset/nmr/hmdb_400M.xlsx")
View(h400)
View(c500)
#-----------------
c400 <- readRDS("dataset/nmr/nmr_400M.rds") %>% .[,c(1:2)]
c500 <- readRDS("dataset/nmr/nmr_500M.rds")  %>% .[,c(1:2)]
View(c500)
View(c400)
dd <- rbind(c400,c500) %>% rbind(.,h400)
View(dd)
dd <- rbind(c400,c500) %>% rbind(.,h400) %>% distinct(.,id,.keep_all = T)
View(dd)
dd <- rbind(c400,c500) %>% rbind(.,h400) %>%
distinct(.,id,.keep_all = T) %>%
distinct(.,name,.keep_all = T)
table(duplicated(dd$id))
table(duplicated(dd$name))
View(dd)
c400$lib <- "c400"
View(c400)
c500$lib <- "c500"
h400$lib <- "h400"
dd <- rbind(c400,c500) %>% rbind(.,h400) %>%
distinct(.,id,.keep_all = T) %>%
distinct(.,name,.keep_all = T)
table(duplicated(dd$id))
table(duplicated(dd$name))
View(dd)
library(openxlsx)
library(dplyr)
rm(list=ls())
Chenomx_400M <- readRDS("dataset/nmr/Chenomx_400M.rds")
Chenomx_500M <- readRDS("dataset/nmr/Chenomx_500M.rds")
Chenomx_600M <- readRDS("dataset/nmr/Chenomx_600M.xlsx")
Chenomx_600M <- read.xlsx("dataset/nmr/Chenomx_600M.xlsx")
xlsx")
# saveRDS(Chenomx_600M,"dataset/nmr/Chenomx_600M.rds")
saveRDS(Chenomx_600M,"dataset/nmr/Chenomx_600M.rds")
Chenomx_400M <- readRDS("dataset/nmr/Chenomx_400M.rds")
Chenomx_500M <- readRDS("dataset/nmr/Chenomx_500M.rds")
Chenomx_600M <- readRDS("dataset/nmr/Chenomx_600M.xlsx")
Chenomx_600M <- readRDS("dataset/nmr/Chenomx_600M.rds")
usethis::use_data(Chenomx_400M,overwrite = T)
usethis::use_data(Chenomx_500M,overwrite = T)
usethis::use_data(Chenomx_600M,overwrite = T)
data(Chenomx_400M)
data(Chenomx_500M)
data(Chenomx_600M)
devtools::load_all()
test_file <- "dataset/nmr/SAR.xlsx"
lib_file <- c("400M","500M")
rm(list=ls())
devtools::load_all()
test_file <- "dataset/nmr/SAR.xlsx"
lib_file <- c("Chenomx_400M","Chenomx_500M","Chenomx_600M")
lib_select <- "standard"
se=0.1
data_join = "id" # "id","name"
#------安装R包--------------------------------------
R_pack <- function(){
installed_packs <- installed.packages()[,1]
packs <- c("openxlsx","dplyr","stringr","data.table","foreach")
not_packs <- packs[!packs %in% installed_packs]
if(length(not_packs)>0){
packs_fun <- function(i){install.packages(i)}
sapply(not_packs,packs_fun)
}
lib_fun <- function(i){library(i,character.only = T)}
sapply(packs,lib_fun)
}
R_pack()
#---数据基本信息------------------
dir_save= paste0("nmr_identification_",Sys.Date())
if(!dir.exists(dir_save))
dir.create(dir_save)
dir_iden = paste0(dir_save,"/identification")
if(!dir.exists(dir_iden))
dir.create(dir_iden)
# 参考库iden
lib_list <- list()
i=1
lib_name <- paste0("nmr_",lib_file[i])
lib_name
lib_name <-lib_file[i]
lib_name
eval(str2expression(paste0("data(",lib_name,")")))
View(Chenomx_400M)
lib_list[[lib_name]] <-  eval(str2expression(lib_name))}
lib_list[[lib_name]] <-  eval(str2expression(lib_name))
View(lib_list)
rm(list=ls())
devtools::load_all()
test_file <- "dataset/nmr/SAR.xlsx"
lib_file <- c("Chenomx_400M","Chenomx_500M","Chenomx_600M")
lib_select <- "standard"
se=0.1
data_join = "id" # "id","name"
nmr_1H (test_file=test_file,lib_file=lib_file,lib_select,se=se,data_join)
